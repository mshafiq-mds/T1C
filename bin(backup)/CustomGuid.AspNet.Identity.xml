<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CustomGuid.AspNet.Identity</name>
    </assembly>
    <members>
        <member name="T:CustomGuid.AspNet.Identity.CustomIdentityDbContext">
            <summary>
            Default IdentityDbContext that uses the default entity types for ASP.NET Identity Users, Roles, Claims, Logins. 
            Use this overload to add your own entity types.
            </summary>
        </member>
        <member name="M:CustomGuid.AspNet.Identity.CustomIdentityDbContext.#ctor">
            <summary>
                Default constructor which uses the DefaultConnection
            </summary>
        </member>
        <member name="M:CustomGuid.AspNet.Identity.CustomIdentityDbContext.#ctor(System.String)">
            <summary>
                Constructor which takes the connection string to use
            </summary>
            <param name="nameOrConnectionString"></param>
        </member>
        <member name="M:CustomGuid.AspNet.Identity.CustomIdentityDbContext.#ctor(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.DbCompiledModel,System.Boolean)">
            <summary>
                Constructs a new context instance using the existing connection to connect to a database, and initializes it from
                the given model.  The connection will not be disposed when the context is disposed if contextOwnsConnection is
                false.
            </summary>
            <param name="existingConnection">An existing connection to use for the new context.</param>
            <param name="model">The model that will back this context.</param>
            <param name="contextOwnsConnection">
                Constructs a new context instance using the existing connection to connect to a
                database, and initializes it from the given model.  The connection will not be disposed when the context is
                disposed if contextOwnsConnection is false.
            </param>
        </member>
        <member name="M:CustomGuid.AspNet.Identity.CustomIdentityDbContext.#ctor(System.Data.Entity.Infrastructure.DbCompiledModel)">
            <summary>
                Constructs a new context instance using conventions to create the name of
                the database to which a connection will be made, and initializes it from
                the given model.  The by-convention name is the full name (namespace + class
                name) of the derived context class.  See the class remarks for how this is
                used to create a connection.
            </summary>
            <param name="model">The model that will back this context.</param>
        </member>
        <member name="M:CustomGuid.AspNet.Identity.CustomIdentityDbContext.#ctor(System.Data.Common.DbConnection,System.Boolean)">
            <summary>
                Constructs a new context instance using the existing connection to connect
                to a database.  The connection will not be disposed when the context is disposed
                if contextOwnsConnection is false.
            </summary>
            <param name="existingConnection">An existing connection to use for the new context.</param>
            <param name="contextOwnsConnection">If set to true the connection is disposed when the context is disposed, otherwise
                the caller must dispose the connection.
            </param>
        </member>
        <member name="M:CustomGuid.AspNet.Identity.CustomIdentityDbContext.#ctor(System.String,System.Data.Entity.Infrastructure.DbCompiledModel)">
            <summary>
                Constructs a new context instance using the given string as the name or connection
                string for the database to which a connection will be made, and initializes
                it from the given model.  See the class remarks for how this is used to create
                a connection.
            </summary>
            <param name="nameOrConnectionString">Either the database name or a connection string.</param>
            <param name="model">The model that will back this context.</param>
        </member>
        <member name="T:CustomGuid.AspNet.Identity.CustomIdentityDbContext`1">
            <summary>
                DbContext which uses a custom user entity with a string primary key
            </summary>
            <typeparam name="TUser"></typeparam>
        </member>
        <member name="M:CustomGuid.AspNet.Identity.CustomIdentityDbContext`1.#ctor">
            <summary>
                Default constructor which uses the DefaultConnection
            </summary>
        </member>
        <member name="M:CustomGuid.AspNet.Identity.CustomIdentityDbContext`1.#ctor(System.String)">
            <summary>
                Constructor which takes the connection string to use
            </summary>
            <param name="nameOrConnectionString"></param>
        </member>
        <member name="M:CustomGuid.AspNet.Identity.CustomIdentityDbContext`1.#ctor(System.String,System.Boolean)">
            <summary>
                Constructor which takes the connection string to use
            </summary>
            <param name="nameOrConnectionString"></param>
            <param name="throwIfV1Schema">Will throw an exception if the schema matches that of Identity 1.0.0</param>
        </member>
        <member name="M:CustomGuid.AspNet.Identity.CustomIdentityDbContext`1.#ctor(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.DbCompiledModel,System.Boolean)">
            <summary>
                Constructs a new context instance using the existing connection to connect to a database, and initializes it from
                the given model.  The connection will not be disposed when the context is disposed if contextOwnsConnection is
                false.
            </summary>
            <param name="existingConnection">An existing connection to use for the new context.</param>
            <param name="model">The model that will back this context.</param>
            <param name="contextOwnsConnection">
                Constructs a new context instance using the existing connection to connect to a
                database, and initializes it from the given model.  The connection will not be disposed when the context is
                disposed if contextOwnsConnection is false.
            </param>
        </member>
        <member name="M:CustomGuid.AspNet.Identity.CustomIdentityDbContext`1.#ctor(System.Data.Entity.Infrastructure.DbCompiledModel)">
            <summary>
                Constructs a new context instance using conventions to create the name of
                the database to which a connection will be made, and initializes it from
                the given model.  The by-convention name is the full name (namespace + class
                name) of the derived context class.  See the class remarks for how this is
                used to create a connection.
            </summary>
            <param name="model">The model that will back this context.</param>
        </member>
        <member name="M:CustomGuid.AspNet.Identity.CustomIdentityDbContext`1.#ctor(System.Data.Common.DbConnection,System.Boolean)">
            <summary>
                Constructs a new context instance using the existing connection to connect
                to a database.  The connection will not be disposed when the context is disposed
                if contextOwnsConnection is false.
            </summary>
            <param name="existingConnection">An existing connection to use for the new context.</param>
            <param name="contextOwnsConnection">If set to true the connection is disposed when the context is disposed, otherwise
                the caller must dispose the connection.
            </param>
        </member>
        <member name="M:CustomGuid.AspNet.Identity.CustomIdentityDbContext`1.#ctor(System.String,System.Data.Entity.Infrastructure.DbCompiledModel)">
            <summary>
                Constructs a new context instance using the given string as the name or connection
                string for the database to which a connection will be made, and initializes
                it from the given model.  See the class remarks for how this is used to create
                a connection.
            </summary>
            <param name="nameOrConnectionString">Either the database name or a connection string.</param>
            <param name="model">The model that will back this context.</param>
        </member>
        <member name="T:CustomGuid.AspNet.Identity.CustomIdentityResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:CustomGuid.AspNet.Identity.CustomIdentityResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:CustomGuid.AspNet.Identity.CustomIdentityResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:CustomGuid.AspNet.Identity.CustomIdentityResources.DuplicateEmail">
            <summary>
              Looks up a localized string similar to Email {0} is already taken..
            </summary>
        </member>
        <member name="P:CustomGuid.AspNet.Identity.CustomIdentityResources.DuplicateUserName">
            <summary>
              Looks up a localized string similar to User name {0} is already taken..
            </summary>
        </member>
        <member name="P:CustomGuid.AspNet.Identity.CustomIdentityResources.EntityFailedValidation">
            <summary>
              Looks up a localized string similar to Entity Type {0} failed validation..
            </summary>
        </member>
        <member name="P:CustomGuid.AspNet.Identity.CustomIdentityResources.ExternalLoginExists">
            <summary>
              Looks up a localized string similar to A user with that external login already exists..
            </summary>
        </member>
        <member name="P:CustomGuid.AspNet.Identity.CustomIdentityResources.IdentityV1SchemaError">
            <summary>
              Looks up a localized string similar to The model backing the &apos;ApplicationDbContext&apos; context has changed since the database was created. This could have happened because the model used by ASP.NET Identity Framework has changed or the model being used in your application has changed. To resolve this issue, you need to update your database. Consider using Code First Migrations to update the database (http://go.microsoft.com/fwlink/?LinkId=301867).  Before you update your database using Code First Migrations, please disable the schema consistency ch [rest of string was truncated]&quot;;.
            </summary>
        </member>
        <member name="P:CustomGuid.AspNet.Identity.CustomIdentityResources.IncorrectType">
            <summary>
              Looks up a localized string similar to Incorrect type, expected type of {0}..
            </summary>
        </member>
        <member name="P:CustomGuid.AspNet.Identity.CustomIdentityResources.PropertyCannotBeEmpty">
            <summary>
              Looks up a localized string similar to {0} cannot be null or empty..
            </summary>
        </member>
        <member name="P:CustomGuid.AspNet.Identity.CustomIdentityResources.RoleAlreadyExists">
            <summary>
              Looks up a localized string similar to Role {0} already exists..
            </summary>
        </member>
        <member name="P:CustomGuid.AspNet.Identity.CustomIdentityResources.RoleIsNotEmpty">
            <summary>
              Looks up a localized string similar to Role is not empty..
            </summary>
        </member>
        <member name="P:CustomGuid.AspNet.Identity.CustomIdentityResources.RoleNotFound">
            <summary>
              Looks up a localized string similar to Role {0} does not exist..
            </summary>
        </member>
        <member name="P:CustomGuid.AspNet.Identity.CustomIdentityResources.UserAlreadyInRole">
            <summary>
              Looks up a localized string similar to User already in role..
            </summary>
        </member>
        <member name="P:CustomGuid.AspNet.Identity.CustomIdentityResources.UserIdNotFound">
            <summary>
              Looks up a localized string similar to The UserId cannot be found..
            </summary>
        </member>
        <member name="P:CustomGuid.AspNet.Identity.CustomIdentityResources.UserLoginAlreadyExists">
            <summary>
              Looks up a localized string similar to UserLogin already exists for loginProvider: {0} with providerKey: {1}.
            </summary>
        </member>
        <member name="P:CustomGuid.AspNet.Identity.CustomIdentityResources.UserNameNotFound">
            <summary>
              Looks up a localized string similar to User {0} does not exist..
            </summary>
        </member>
        <member name="P:CustomGuid.AspNet.Identity.CustomIdentityResources.UserNotInRole">
            <summary>
              Looks up a localized string similar to User is not in role..
            </summary>
        </member>
        <member name="P:CustomGuid.AspNet.Identity.CustomIdentityResources.ValueCannotBeNullOrEmpty">
            <summary>
              Looks up a localized string similar to Value cannot be null or empty..
            </summary>
        </member>
        <member name="T:CustomGuid.AspNet.Identity.CustomIdentityRole">
            <summary>
                Represents a Role entity
            </summary>
        </member>
        <member name="M:CustomGuid.AspNet.Identity.CustomIdentityRole.#ctor">
            <summary>
                Constructor
            </summary>
        </member>
        <member name="M:CustomGuid.AspNet.Identity.CustomIdentityRole.#ctor(System.String)">
            <summary>
                Constructor
            </summary>
            <param name="roleName"></param>
        </member>
        <member name="T:CustomGuid.AspNet.Identity.CustomIdentityUser">
            <summary>
                Default EntityFramework IUser implementation
            </summary>
        </member>
        <member name="M:CustomGuid.AspNet.Identity.CustomIdentityUser.#ctor">
            <summary>
                Constructor which creates a new Guid for the Id
            </summary>
        </member>
        <member name="M:CustomGuid.AspNet.Identity.CustomIdentityUser.#ctor(System.String)">
            <summary>
                Constructor that takes a userName
            </summary>
            <param name="userName"></param>
        </member>
        <member name="T:CustomGuid.AspNet.Identity.CustomIdentityUserClaim">
            <summary>
                EntityType that represents one specific user claim
            </summary>
        </member>
        <member name="T:CustomGuid.AspNet.Identity.CustomIdentityUserLogin">
            <summary>
                Entity type for a user's login (i.e. facebook, google)
            </summary>
        </member>
        <member name="T:CustomGuid.AspNet.Identity.CustomIdentityUserRole">
            <summary>
                EntityType that represents a user belonging to a role
            </summary>
        </member>
        <member name="T:CustomGuid.AspNet.Identity.CustomRoleManager`1">
            <summary>
                Exposes role related api which will automatically save changes to the RoleStore
            </summary>
            <typeparam name="TRole"></typeparam>
        </member>
        <member name="M:CustomGuid.AspNet.Identity.CustomRoleManager`1.#ctor(CustomGuid.AspNet.Identity.ICustomRoleStore{`0})">
            <summary>
                Constructor
            </summary>
            <param name="store"></param>
        </member>
        <member name="T:CustomGuid.AspNet.Identity.CustomRoleStore`1">
            <summary>
                EntityFramework based implementation
            </summary>
            <typeparam name="TRole"></typeparam>
        </member>
        <member name="M:CustomGuid.AspNet.Identity.CustomRoleStore`1.#ctor">
            <summary>
                Constructor
            </summary>
        </member>
        <member name="M:CustomGuid.AspNet.Identity.CustomRoleStore`1.#ctor(System.Data.Entity.DbContext)">
            <summary>
                Constructor
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:CustomGuid.AspNet.Identity.CustomUserManager`1">
            <summary>
                UserManager for users where the primary key for the User is of type string
            </summary>
            <typeparam name="TUser"></typeparam>
        </member>
        <member name="M:CustomGuid.AspNet.Identity.CustomUserManager`1.#ctor(CustomGuid.AspNet.Identity.ICustomUserStore{`0})">
            <summary>
                Constructor
            </summary>
            <param name="store"></param>
        </member>
        <member name="T:CustomGuid.AspNet.Identity.CustomUserStore`1">
            <summary>
                EntityFramework based user store implementation that supports IUserStore, IUserLoginStore, IUserClaimStore and
                IUserRoleStore
            </summary>
            <typeparam name="TUser"></typeparam>
        </member>
        <member name="M:CustomGuid.AspNet.Identity.CustomUserStore`1.#ctor">
            <summary>
                Default constuctor which uses a new instance of a default EntityyDbContext
            </summary>
        </member>
        <member name="M:CustomGuid.AspNet.Identity.CustomUserStore`1.#ctor(System.Data.Entity.DbContext)">
            <summary>
                Constructor
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:CustomGuid.AspNet.Identity.QueryExtensions">
            <summary>
            Provides extension methods for IQueryable queries.
            </summary>
        </member>
        <member name="M:CustomGuid.AspNet.Identity.QueryExtensions.ExcludeSoftDeleted``1(System.Linq.IQueryable{``0})">
            <summary>
            Filters out soft-deleted records by excluding entities where the 'DeletedDate' property is not null.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="query"></param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="T:CustomGuid.AspNet.Identity.AuthHelper">
            <summary>
            Auth helper class.
            </summary>
        </member>
        <member name="M:CustomGuid.AspNet.Identity.AuthHelper.IsSuperadmin(CustomGuid.AspNet.Identity.CustomIdentityUser)">
            <summary>
            Check if the user is superadmin.
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="T:CustomGuid.AspNet.Identity.SoftDeleteHelper">
            <summary>
            Soft delete helper class.
            </summary>
        </member>
        <member name="M:CustomGuid.AspNet.Identity.SoftDeleteHelper.SoftDelete(System.Data.Entity.DbContext,System.Object)">
            <summary>
            Performs a soft delete by setting the 'DeletedDate' column to the current datetime
            and optionally updating the 'DeletedBy' column with the current user ID.
            </summary>
            <param name="context"></param>
            <param name="entity"></param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:CustomGuid.AspNet.Identity.SoftDeleteHelper.Restore(System.Data.Entity.DbContext,System.Object)">
            <summary>
            Restores a soft-deleted entity by setting the 'DeletedDate' and 'DeletedBy' columns to null.
            </summary>
            <param name="context"></param>
            <param name="entity"></param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:CustomGuid.AspNet.Identity.SoftDeleteHelper.Delete(System.Data.Entity.DbContext,System.Object)">
            <summary>
            Permanently deletes an entity from the database.
            </summary>
            <param name="context"></param>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="T:CustomGuid.AspNet.Identity.ICustomRoleStore`1">
            <summary>
                Interface that exposes basic role management
            </summary>
            <typeparam name="TRole"></typeparam>
        </member>
        <member name="T:CustomGuid.AspNet.Identity.ICustomUserStore`1">
            <summary>
                Interface that exposes basic user management apis
            </summary>
            <typeparam name="TUser"></typeparam>
        </member>
        <member name="T:CustomGuid.AspNet.Identity.ICustomQueryableRoleStore`1">
            <summary>
                Interface that exposes an IQueryable roles
            </summary>
            <typeparam name="TRole"></typeparam>
        </member>
        <member name="T:CustomGuid.AspNet.Identity.CustomIdentityExtensions">
            <summary>
                Extensions making it easier to get the user name/user id claims off of an identity
            </summary>
        </member>
        <member name="M:CustomGuid.AspNet.Identity.CustomIdentityExtensions.GetUserName(System.Security.Principal.IIdentity)">
            <summary>
                Return the user name using the UserNameClaimType
            </summary>
            <param name="identity"></param>
            <returns></returns>
        </member>
        <member name="M:CustomGuid.AspNet.Identity.CustomIdentityExtensions.GetUserId``1(System.Security.Principal.IIdentity)">
            <summary>
                Return the user id using the UserIdClaimType
            </summary>
            <typeparam name="T"></typeparam>
            <param name="identity"></param>
            <returns></returns>
        </member>
        <member name="M:CustomGuid.AspNet.Identity.CustomIdentityExtensions.GetUserID(System.Security.Principal.IIdentity)">
            <summary>
                Return the user id using the UserIdClaimType
            </summary>
            <param name="identity"></param>
            <returns></returns>
        </member>
        <member name="M:CustomGuid.AspNet.Identity.CustomIdentityExtensions.FindFirstValue(System.Security.Claims.ClaimsIdentity,System.String)">
            <summary>
                Return the claim value for the first claim with the specified type if it exists, null otherwise
            </summary>
            <param name="identity"></param>
            <param name="claimType"></param>
            <returns></returns>
        </member>
    </members>
</doc>
